:mod:`box_embeddings.modules.regularization.regularizer`
========================================================

.. py:module:: box_embeddings.modules.regularization.regularizer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   box_embeddings.modules.regularization.regularizer.BoxRegularizer



.. class:: BoxRegularizer(weight: float, log_scale: bool = True, **kwargs: Any)


   Bases: :class:`torch.nn.Module`, :class:`box_embeddings.common.registrable.Registrable`

   Base box-regularizer class

   .. method:: forward(self, box_tensor: box_embeddings.parameterizations.box_tensor.BoxTensor) -> Union[(float, torch.Tensor)]

      Calls the _forward and multiplies the weight

      :param box_tensor: Input box tensor

      :returns: scalar regularization loss


   .. method:: register(cls: Type[T], name: str, constructor: str = None, exist_ok: bool = False) -> Callable[([Type[T]], Type[T])]
      :classmethod:

      Transparent method

      :param name: TODO
      :param constructor: TODO
      :param exist_ok: TODO

      :returns: a wrapped callable



