:mod:`box_embeddings.modules.regularization.l2_side_regularizer`
================================================================

.. py:module:: box_embeddings.modules.regularization.l2_side_regularizer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   box_embeddings.modules.regularization.l2_side_regularizer.L2SideBoxRegularizer



Functions
~~~~~~~~~

.. autoapisummary::

   box_embeddings.modules.regularization.l2_side_regularizer.l2_side_regularizer


.. data:: eps
   :annotation: = 1e-23

   

.. function:: l2_side_regularizer(box_tensor: box_embeddings.parameterizations.box_tensor.BoxTensor, log_scale: bool = False) -> Union[(float, torch.Tensor)]

   Applies l2 regularization on all sides of all boxes and returns the sum.

   :param box_tensor: TODO
   :param log_scale: mean in log scale

   :returns: (None)


.. class:: L2SideBoxRegularizer(weight: float, log_scale: bool = False)


   Bases: :class:`box_embeddings.modules.regularization.regularizer.BoxRegularizer`

   Applies l2 regularization on side lengths.

   .. method:: forward(self, box_tensor: box_embeddings.parameterizations.box_tensor.BoxTensor) -> Union[(float, torch.Tensor)]

      Calls the _forward and multiplies the weight

      :param box_tensor: Input box tensor

      :returns: scalar regularization loss


   .. method:: register(cls: Type[T], name: str, constructor: str = None, exist_ok: bool = False) -> Callable[([Type[T]], Type[T])]
      :classmethod:

      Transparent method

      :param name: TODO
      :param constructor: TODO
      :param exist_ok: TODO

      :returns: a wrapped callable



